library(shiny)
library(shinyWidgets)
library(shinythemes)
library(shinyalert)
library(elo)
library(ggplot2)
library(ggrepel)
library(plotly)
library(ggbump)
library(openxlsx)
library(stringr)
source("src/functions.R")

# boys <- readLines("data/top1000_boys.txt")
# boys <- boys[1:50]

boys_names <- read.xlsx("data/2019boysnames.xlsx",sheet = 4)[-c(1:4),2]
girls_names <- read.xlsx("data/2019girlsnames.xlsx",sheet = 4)[-c(1:4),2]
boys_names <- str_to_title(boys_names[-which(is.na(boys_names))])
girls_names <- str_to_title(girls_names[-which(is.na(girls_names))])

button_colour <- "primary"


# get_rank_plot <- function(shared_data,user_name,partner_name){
#   library(reshape2)
#   
#   shared_long <- 
#     melt(shared_data,
#          id.vars = "Name",
#          variable.name = "User",
#          measure.vars = c("User.rank","Partner.rank"))
#   shared_long$User <- gsub(pattern = "User.rank",
#                            replacement = user_name,
#                            x = shared_long$User)
#   shared_long$User <- gsub(pattern = "Partner.rank",
#                            replacement = partner_name,
#                            x = shared_long$User)
#   ggplot(shared_long,aes(x = User,y = value,color = Name)) + 
#     geom_bump()
# }
ui <- #####
  fluidPage(theme = shinytheme("journal"),
            tabsetPanel(id = "tabs",
                        tabPanel("Name vs name",value = "name_vs_name",
                                 titlePanel(
                                   title =
                                     tags$link(rel = "icon", type = "image/png", 
                                               href = "https://www.kindpng.com/picc/m/205-2051178_wild-thornberrys-nigel-meme-face-hd-png-download.png"),
                                   "NameSmash"
                                 ),
                                 useShinyalert(),
                                 column(4,offset = 4,align = "center",
                                        hr(),
                                        h2("NameSmash"),
                                        switchInput(
                                          inputId = "gender",
                                          onLabel = "Boys",
                                          offLabel = "Girls",
                                          label = "Gender", 
                                          labelWidth = "80px"
                                        ),
                                        hr()),
                                 hr(),
                                 fluidRow(
                                   column(3,offset = 3,align = "center",
                                          hr(),
                                          actionBttn("name1",
                                                     style = "minimal", 
                                                     color = button_colour,
                                                     label = "A")),#competitions[1,1])),
                                   column(3,align = "center",
                                          hr(),
                                          actionBttn("name2",
                                                     style = "minimal", 
                                                     color = button_colour,
                                                     label = "B"))#competitions[1,2])),
                                 ),
                                 fluidRow(
                                   hr(),
                                   column(4,offset = 4,align = "center",
                                          tableOutput("elo_top"))
                                 ),
                                 textOutput("counter")
                        ),
                        tabPanel("Partner vs partner",
                                 value = "partner_vs_partner",
                                 textInput("partner_name",label = "Partner name:"),
                                 
                                 # verbatimTextOutput("partner_name_out"),
                                 textOutput("user_partner_out"),
                                 fluidRow(
                                   column(4,tableOutput("shared_data")),
                                   column(6,offset = 1,
                                          plotlyOutput("favourites_plot",width = "100%",height = "400px"))
                                 )
                        ))
                                   # column(2,plotOutput("ranked_plot",width = "100%"))
                                 
                        
  )

server <- function(input, output, session) { #####
  
  # Alert to get username
  observe({
    shinyalert(title = "Welcome",
               text = "Enter your name to get started",
               inputType = "text",animation = "pop",
               inputId = "user_name",
               type = "input",
               size = "m")
  })

  # Text confirmed who is compared
  output$user_partner_out <- renderText({
    print(input$partner_name)
    paste0(input$user_name," against ",input$partner_name)
  })

#
#   # observeEvent(input$gender,{
#   #   updateActionButton(session = session,inputId = "name1",
#   #                      label = competitions()$name1[1])
#   #   updateActionButton(session = session,inputId = "name2",
#   #                      label = competitions()$name2[1])
#   # })

  # Reactives to set up folder name, gender, names list, progress filename
  names_in <- reactive({if(input$gender){boys_names}else{girls_names}})
  gender <- reactive({if(input$gender){"Boys"}else{"Girls"}})
  elo_user_folder <- reactive(paste0("user_data/",input$user_name,"_",gender()))
  elo_partner_folder <- reactive(paste0("user_data/",input$user_name,"_",gender()))
  
  elo_user_fname <- reactive(paste0(elo_user_folder(),"/elo_df.txt"))
  elo_partner_fname <- reactive(paste0(elo_partner_folder(),"/elo_df.txt"))
  
  progress_fname <- reactive(paste0(elo_user_folder(),"/progress.txt"))
  
  # If username or gender is changed, check if file exists and make it if not
  observeEvent(c(input$user_name,
                 input$gender),{
    print(elo_user_fname())
    dir.create(elo_user_folder())
    if(!file.exists(elo_user_fname())){
      write.table(get_blank_elo(names_in = names_in()),elo_user_fname())
    }
    if(!file.exists(progress_fname())){
      writeLines("1",progress_fname())
    }
  })

  get_progress <- reactive(as.numeric(readLines(progress_fname())))
  current_ind <- reactive(get_progress())#reactive({input$name1 + input$name2 + 1})
   
  competitions <- reactive(get_competitions(names_in = names_in()))

  output$counter <- renderText(current_ind())
  observeEvent(input$name1,{
    elo_df <- read.table(elo_user_fname(),stringsAsFactors = FALSE)
    print(paste0("----",current_ind(),"----"))
    this_result <- data.frame(name1 = competitions()$name1[current_ind()],
                              name2 = competitions()$name2[current_ind()],
                              outcome = 1,stringsAsFactors = FALSE)
    new_elo <- update_elo(elo_df = elo_df,this_result)
    write.table(new_elo,elo_user_fname())
    
    updateActionButton(session,inputId = "name1",label = competitions()$name1[current_ind()+1])
    updateActionButton(session,inputId = "name2",label = competitions()$name2[current_ind()+1])
    writeLines(as.character(get_progress() + 1),
               progress_fname())
  })
  observeEvent(input$name2,{
    elo_df <- read.table(elo_user_fname(),stringsAsFactors = FALSE)
    this_result <- data.frame(name1 = competitions()$name1[current_ind()],
                              name2 = competitions()$name2[current_ind()],
                              outcome = 0,stringsAsFactors = FALSE)
    new_elo <- update_elo(elo_df = elo_df,this_result)
    write.table(new_elo,elo_user_fname())
    updateActionButton(session,inputId = "name1",label = competitions()$name1[current_ind()+1])
    updateActionButton(session,inputId = "name2",label = competitions()$name2[current_ind()+1])
    writeLines(as.character(get_progress() + 1),
               progress_fname())
  })
  get_top <- eventReactive(c(input$name1,input$name2,input$gender),{
    elo_df <- read.table(elo_user_fname())
    elo_df <- elo_df[sort.int(elo_df$elo,decreasing = TRUE,index.return = TRUE)$ix,]
    elo_df$elo <- round(elo_df$elo)
    class(elo_df$elo) <- "integer"
    colnames(elo_df) <- c("Name","Score","Wins","Losses")
    elo_df
  })
  output$elo_top <- renderTable(get_top())

  reactive({message(input$partner_name)})
  reactive({message(input$user_name)})

  shared_data <- reactive({get_shared_data(input$user_name,
                                           input$partner_name)})
  output$shared_data <- renderTable(shared_data())

  output$favourites_plot <- renderPlotly(get_fav_plot(shared_data(),
                                                      user_name = input$user_name,
                                                      partner_name = input$partner_name))
  # output$ranked_plot <- renderPlot(get_rank_plot(shared_data(),
  #                                                user_name = input$user_name,
  #                                                partner_name = input$partner_name))
}

shinyApp(ui = ui, server = server)